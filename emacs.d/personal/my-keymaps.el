(global-unset-key "\C-l")
(global-unset-key "\C-q")
(global-unset-key "\C-r")
(global-unset-key "\M-t")
;; undo this so that repeats of j just move down (or insert j)
(key-chord-define-global "jj" nil)

(global-set-key [f5] 'compile)

;; Reset Ctrl to do mostly emacs normal things
(define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
(define-key evil-motion-state-map "\C-e" 'evil-end-of-line)
(define-key evil-insert-state-map "\C-e" 'end-of-line)
(define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
(define-key evil-normal-state-map "\C-f" 'evil-forward-char)
(define-key evil-insert-state-map "\C-f" 'evil-forward-char)
(define-key evil-insert-state-map "\C-f" 'evil-forward-char)
(define-key evil-normal-state-map "\C-b" 'evil-backward-char)
(define-key evil-insert-state-map "\C-b" 'evil-backward-char)
(define-key evil-visual-state-map "\C-b" 'evil-backward-char)
(define-key evil-normal-state-map "\C-d" 'evil-delete-char)
(define-key evil-insert-state-map "\C-d" 'evil-delete-char)
(define-key evil-visual-state-map "\C-d" 'evil-delete-char)
(define-key evil-normal-state-map "\C-n" 'evil-next-line)
(define-key evil-insert-state-map "\C-n" 'evil-next-line)
(define-key evil-visual-state-map "\C-n" 'evil-next-line)
(define-key evil-normal-state-map "\C-p" 'evil-previous-line)
(define-key evil-insert-state-map "\C-p" 'evil-previous-line)
(define-key evil-visual-state-map "\C-p" 'evil-previous-line)
(define-key evil-normal-state-map "\C-w" 'evil-delete)
(define-key evil-insert-state-map "\C-w" 'evil-delete)
(define-key evil-visual-state-map "\C-w" 'evil-delete)
(define-key evil-normal-state-map "\C-y" 'yank)
(define-key evil-insert-state-map "\C-y" 'yank)
(define-key evil-visual-state-map "\C-y" 'yank)
(define-key evil-normal-state-map "\C-k" 'kill-line)
(define-key evil-insert-state-map "\C-k" 'kill-line)
(define-key evil-visual-state-map "\C-k" 'kill-line)

(when (not (display-graphic-p)) (define-key evil-insert-state-map "jk" 'evil-normal-state))

(defmacro my-define-niv (in out) `(progn
                                (define-key evil-normal-state-map ,in ,out)
                                (define-key evil-insert-state-map ,in ,out)
                                (define-key evil-visual-state-map ,in ,out)
                                (define-key evil-motion-state-map ,in ,out)
                                    ))
(defmacro my-define-nv (in out) `(progn
                                (define-key evil-normal-state-map ,in ,out)
                                (define-key evil-visual-state-map ,in ,out)
                                (define-key evil-motion-state-map ,in ,out)
                                    ))

(global-set-key (kbd "M-/") 'auto-complete)
(global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)

(my-define-niv "\C-n" 'evil-next-line)
(my-define-niv "\C-p" 'evil-previous-line)
(my-define-niv "\C-k" 'kill-line)
(my-define-nv (kbd "p") 'evil-paste-after2)
(my-define-nv (kbd "P") 'evil-paste-before2)
(my-define-nv (kbd "R") 'evil-destroy-and-paste)
(my-define-nv (kbd "TAB") 'evil-undefine)
(my-define-nv (kbd "grep") 'occur)
(my-define-nv (kbd "go") 'ido-find-file)
(my-define-nv (kbd "gb") 'ido-switch-buffer)
(my-define-nv (kbd "gt") 'elscreen-next)
(my-define-nv (kbd "gT") 'elscreen-previous)
(my-define-nv (kbd "gcc") 'compile)
(my-define-nv (kbd "-") (kbd "$"))
(my-define-nv (kbd "=") 'evil-indent)
(my-define-nv (kbd ")") 'evil-next-close-paren)
(my-define-nv (kbd "(") 'evil-previous-open-paren)
(my-define-nv (kbd "<escape>") 'keyboard-quit)
(my-define-nv (kbd "C-S-O") 'evil-jump-forward)
(my-define-nv (kbd "C-o") 'evil-jump-backward)
(my-define-nv (kbd "[") 'four-down)
(my-define-nv (kbd "]") 'four-up)

(defun evil-undefine ()
  (interactive)
  (let (evil-mode-map-alist)
    (call-interactively (key-binding (this-command-keys)))))

(require 'key-chord)
(key-chord-mode 1)
(key-chord-define-global "jk"  'evil-normal-state)

(provide 'my-keymaps)
