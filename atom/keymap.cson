# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/customizing-atom#customizing-key-bindings
# * https://atom.io/docs/latest/advanced/keymaps
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'atom-text-editor.vim-mode.insert-mode:not(.mini)':
  'j k': 'vim-mode:activate-normal-mode'

'atom-text-editor.vim-mode.normal-mode':
  # leader commands, by starting letter
  'space f f': 'editor:toggle-current-row-folding'
  'space g s': 'git-plus:status'
  'space g c j': 'git-plus:add-all-and-commit' # git commit jira on the command line
  'space r r': 'rspec:run-all'
  'space r f': 'rspec:run' # run the current file
  'space r c': 'rspec:run-for-line' # run the current spec

  ';': 'ex-mode:open' # shortcut for : (so you don't have to type shift)
  'K': 'editor:newline' # mirrors J in vim mode, since there's no help yet
  'tab': 'pane:show-next-item'
  'shift-tab': 'pane:show-previous-item'

'.platform-darwin':
  'cmd-k right': 'pane:split-right-moving-current-tab'
  'ctrl-n': 'tree-view:toggle-focus'
  'ctrl-p': 'fuzzy-finder:toggle-file-finder'

'.tree-view':
  'n': 'tree-view:add-file'
